# -*- coding: utf-8 -*-
"""FinalColab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hOND25KItrMiBwUw8Qq7oqUyqy2V2j3p
"""

!pip install ucimlrepo

from ucimlrepo import fetch_ucirepo

# fetch dataset
breast_cancer_wisconsin_diagnostic = fetch_ucirepo(id=17)

# data (as pandas dataframes)
x = breast_cancer_wisconsin_diagnostic.data.features
y = breast_cancer_wisconsin_diagnostic.data.targets

# metadata
print(breast_cancer_wisconsin_diagnostic.metadata)

# variable information
print(breast_cancer_wisconsin_diagnostic.variables)

MCount = 0;
BCount = 0;

print(y)
for i in range(569):
  if y['Diagnosis'][i] == 'M':
    y['Diagnosis'][i] = 1
    MCount = MCount + 1
  else:
    y['Diagnosis'][i] = 0
    BCount = BCount + 1

y = y.copy().astype(int)

print(y)
print("Number of malignant cells: " + str(MCount))
print("Number of benign cells: " + str(BCount))

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

#initializing model -- adjust # of neighbors
KNN = KNeighborsClassifier(n_neighbors= 7)

#training/fit x_train, y_train
KNN.fit(x_train, y_train)

#preditions
y_pred = KNN.predict(x_test)

#accuracy of the model
accuracy_score(y_pred, y_test)

from joblib import dump, load

import warnings
warnings.filterwarnings("ignore")
!pip -q install streamlit
!pip -q install pyngrok
from pyngrok import ngrok

!ngrok authtoken 2beVNYXgJ1r2usnacoAqAbktZ9z_3MCV2gUxGsrTxJKJ39UJ

def launch_website():
  print ("Click this link to try your web app:")
  if (ngrok.get_tunnels() != None):
    ngrok.kill()
  public_url = ngrok.connect()
  print (public_url)
  !streamlit run --server.port 80 app.py >/dev/null

dump(KNN, "model.joblib")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile header.py
# import streamlit as st
# 
# def create_header():
#   st.title("Machine Learning Model for Diagnosis of Breast Cancer")
#   st.header("Please enter the following values for nucleaus features of breast cancer tissue cells below.")
#   st.subheader("Definition of features:")
#   st.subheader("Definition of features:")
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile userinput.py
# import streamlit as st
# 
# def get_user_input():
#   import streamlit as st
#   radius = st.number_input("Enter radius")
#   texture = st.number_input("Enter texture")
#   perimeter = st.number_input("Enter perimeter")
#   area = st.number_input("Enter area")
#   smoothness = st.number_input("Enter smoothness")
#   compactness = st.number_input("Enter compactness")
#   concavity = st.number_input("Enter concavity")
#   concave_points =st.number_input("Enter concave_points")
#   symmetry = st.number_input("Enter symmetry")
#   fractal_dimension = st.number_input("Enter fractal_dimension")
#   input_features = [[radius, texture, perimeter, area, smoothness,
#        compactness, concavity, concave_points, symmetry,
#        fractal_dimension]*3]
#   return input_features
# 
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile predictor.py
# 
# def make_prediction(model, input_features):
#   return model.predict(input_features)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile response.py
# import streamlit as st
# 
# def get_app_response(prediction):
#   if prediction == 1:
#     st.write("Malignant")
#   else:
#     st.write("Benign")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# from joblib import load
# 
# #Imports the functions coded above
# from header import create_header
# from userinput import get_user_input
# from predictor import make_prediction
# from response import get_app_response
# 
# #Load DecisionTree model into web app
# model = load("model.joblib")
# st.write ("Model uploaded!")
# 
# create_header()
# input_features = get_user_input()
# prediction = make_prediction(model, input_features)
# get_app_response(prediction)

launch_website()