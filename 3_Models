!pip install ucimlrepo

from ucimlrepo import fetch_ucirepo

# fetch dataset
breast_cancer_wisconsin_diagnostic = fetch_ucirepo(id=17)

# data (as pandas dataframes)
x = breast_cancer_wisconsin_diagnostic.data.features
y = breast_cancer_wisconsin_diagnostic.data.targets

# metadata
print(breast_cancer_wisconsin_diagnostic.metadata)

# variable information
print(breast_cancer_wisconsin_diagnostic.variables)

print(x)
print(y)

MCount = 0;
BCount = 0;

print(y)
for i in range(569):
  if y['Diagnosis'][i] == 'M':
    y['Diagnosis'][i] = 1
    MCount = MCount + 1
  else:
    y['Diagnosis'][i] = 0
    BCount = BCount + 1

y = y.copy().astype(int)

print(y)
print("Number of malignant cells: " + str(MCount))
print("Number of benign cells: " + str(BCount))

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)

print(x_train)
print(y_train)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#initializing model
lr = LogisticRegression()

#training/fit x_train, y_train
lr.fit(x_train, y_train)

#preditions
y_pred = lr.predict(x_test)

#accuracy of the model
accuracy_score(y_pred, y_test)

from sklearn.neural_network import MLPClassifier

#initializing model
mlp = MLPClassifier()

#training/fit x_train, y_train
mlp.fit(x_train, y_train)

#preditions
y_pred = mlp.predict(x_test)

#accuracy of the model
accuracy_score(y_pred, y_test)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

#initializing model -- adjust # of neighbors
KNN = KNeighborsClassifier(n_neighbors= 7)

#training/fit x_train, y_train
KNN.fit(x_train, y_train)

#preditions
y_pred = KNN.predict(x_test)

#accuracy of the model
accuracy_score(y_pred, y_test)

print(x_test)
print(y_test)

#testing point for model
import numpy as np

x_p = np.array(x_test)
y_p = np.array(y_pred)
y_p_test = np.array(y_test)

print("predicted value:        actual value:")
for i in range(len(x_p)):
  print(str(y_p[i]) + "                      " + str(y_p_test[i]))

#Ploting Graphs
import matplotlib.pyplot as plt
import numpy as np

x_plt = np.array(x_train)
y_plt = np.array(y_train)

plt.scatter(x['radius1'], y, c = "blue")
plt.xlabel('radius')
plt.ylabel('diagnosis')
plt.show()

plt.scatter(x['perimeter1'], y, c = "blue")
plt.xlabel('perimeter')
plt.ylabel('diagnosis')
plt.show()

plt.scatter(x['area1'], y, c = "blue")
plt.xlabel('area')
plt.ylabel('diagnosis')
plt.show()

plt.scatter(x['compactness1'], y, c = "blue")
plt.xlabel('compactness')
plt.ylabel('diagnosis')
plt.show()

plt.scatter(x['smoothness1'], y, c = "blue")
plt.xlabel('smoothness')
plt.ylabel('diagnosis')
plt.show()

plt.scatter(x['concavity1'], y, c = "blue")
plt.xlabel('concavity')
plt.ylabel('diagnosis')
plt.show()

plt.scatter(x['concave_points1'], y, c = "blue")
plt.xlabel('concave_points')
plt.ylabel('diagnosis')
plt.show()

plt.scatter(x['symmetry1'], y, c = "blue")
plt.xlabel('symmetry')
plt.ylabel('diagnosis')
plt.show()

plt.scatter(x['fractal_dimension1'], y, c = "blue")
plt.xlabel('fractal_dimension')
plt.ylabel('diagnosis')
plt.show()

plt.scatter(x['texture1'], y, c = "blue")
plt.xlabel('texture')
plt.ylabel('diagnosis')
plt.show()

#Confucian Matrix
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

y_true = np.array(y_test)
y_pred = np.array(y_pred)
cm = confusion_matrix(y_true, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[1, 0])
disp.plot()
plt.show()

from joblib import dump, load

import warnings
warnings.filterwarnings("ignore")
!pip -q install streamlit
!pip -q install pyngrok
from pyngrok import ngrok

!ngrok authtoken 2beVNYXgJ1r2usnacoAqAbktZ9z_3MCV2gUxGsrTxJKJ39UJ

def launch_website():
  print ("Click this link to try your web app:")
  if (ngrok.get_tunnels() != None):
    ngrok.kill()
  public_url = ngrok.connect()
  print (public_url)
  !streamlit run --server.port 80 app.py >/dev/null

dump(KNN, "model.joblib")

%%writefile header.py
import streamlit as st

def create_header():
  st.title("Machine Learning Model for Diagnosis of Breast Cancer")
  st.subheader("Please enter the following values for nucleaus features of breast cancer tissue cells below.")

%%writefile userinput.py
import streamlit as st

def get_user_input():
  import streamlit as st
  radius = st.number_input("Enter radius")
  texture = st.number_input("Enter texture")
  perimeter = st.number_input("Enter perimeter")
  area = st.number_input("Enter area")
  smoothness = st.number_input("Enter smoothness")
  compactness = st.number_input("Enter compactness")
  concavity = st.number_input("Enter concavity")
  concave_points =st.number_input("Enter concave_points")
  symmetry = st.number_input("Enter symmetry")
  fractal_dimension = st.number_input("Enter fractal_dimension")
  input_features = [['radius', 'texture', 'perimeter', 'area', 'smoothness',
       'compactness', 'concavity', 'concave_points', 'symmetry',
       'fractal_dimension']*3]
  return input_features

%%writefile predictor.py

def make_prediction(model, input_features):
  return model.predict(input_features)

%%writefile response.py
import streamlit as st

def get_app_response(prediction):
  if prediction == 1:
    st.write("Malignant")
  else:
    st.write("Benign")

%%writefile app.py
import streamlit as st
from joblib import load

#Imports the functions coded above
from header import create_header()
from userinput import get_user_input()
from predictor import make_prediction(model, input_features):
from response import get_app_response(prediction)

#Load our DecisionTree model into web app
model = load("model.joblib")
st.write ("Model uploaded!")

create_header()
input_features = get_user_input()
prediction = make_prediction(model, input_features)
get_app_response(prediction)

launch_website()

mask = y['Diagnosis'].isin([1])
mal_patients = x[mask]

import matplotlib.pyplot as plt
import numpy as np

# Creating dataset
# data_1 = mal_patients['area1']
data_1 = mal_patients['area1']
data_2 = mal_patients['area2']
data_3 = mal_patients['area3']
data = [data_1, data_2, data_3]

fig = plt.figure()
ax = fig.add_subplot(111)

# Creating axes instance
bp = ax.boxplot(data, patch_artist = True,
                notch ='True', vert = 0)
# x-axis labels
ax.set_yticklabels(['data_1', 'data_2', 'data_3'])
